// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MonsterConf_Monster.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ExcelConvert.Auto.MonsterConf {

  /// <summary>Holder for reflection information generated from MonsterConf_Monster.proto</summary>
  public static partial class MonsterConfMonsterReflection {

    #region Descriptor
    /// <summary>File descriptor for MonsterConf_Monster.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonsterConfMonsterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlNb25zdGVyQ29uZl9Nb25zdGVyLnByb3RvEgtYbHN4Q29udmVydCKdBwoa",
            "TW9uc3RlckNvbmZfTW9uc3Rlcl9SZWNvcmQSEQoJTW9uc3RlcklkGAEgASgF",
            "EgwKBE5hbWUYAiABKAkSDgoGQXZhdGFyGAMgASgJEhMKC01vbnN0ZXJUeXBl",
            "GAQgASgFEhQKDE1vbnN0ZXJUeXBlMRgFIAEoBRIUCgxNb25zdGVyVHlwZTIY",
            "BiABKAUSEgoKQXZhdGFyU2l6ZRgHIAEoBRIOCgZSYWRpdXMYCCABKAUSEQoJ",
            "TWFzc0xldmVsGAkgASgFEhEKCU1vdmVTcGVlZBgKIAEoBRIQCghNb3ZlVHlw",
            "ZRgLIAEoBRIRCglOb0Jsb2NrZWQYDCABKAUSEgoKQUlTdHJhdGVneRgNIAEo",
            "CRIXCg9BdHRhY2tSYW5nZVR5cGUYDiABKAUSFAoMQXR0YWNrUmFkaXVzGA8g",
            "ASgFEhMKC0F0dGFja0FuZ2xlGBAgASgFEhMKC0F0dGFja1dpZHRoGBEgASgF",
            "EhQKDEF0dGFja0hlaWdodBgSIAEoBRIVCg1BdHRhY2tZT2Zmc2V0GBMgASgF",
            "EhQKDENvc3RJbmNyZWFzZRgUIAEoBRIKCgJIUBgVIAEoBRIOCgZBdHRhY2sY",
            "FiABKAUSFQoNUGh5c2ljc0RlZmVuZBgXIAEoBRITCgtNYWdpY0RlZmVuZBgY",
            "IAEoBRIPCgdIaXRSYXRlGBkgASgFEhEKCURvZGdlUmF0ZRgaIAEoBRIMCgRD",
            "cml0GBsgASgFEhYKDkNyaXRpY2FsU3RyaWtlGBwgASgFEg4KBkluanVyeRgd",
            "IAEoBRIVCg1IYXJtUmVkdWN0aW9uGB4gASgFEhkKEVN0dW5uZWRSZXNpc3Rh",
            "bmNlGB8gASgFEhgKEEZyb3plblJlc2lzdGFuY2UYICABKAUSGwoTVW5tb3Zh",
            "YmxlUmVzaXN0YW5jZRghIAEoBRIaChJTaWxlbmNlZFJlc2lzdGFuY2UYIiAB",
            "KAUSGgoSRGlzYXJtZWRSZXNpc3RhbmNlGCMgASgFEhwKFFRyZWF0bWVudENv",
            "ZWZmaWNpZW50GCQgASgFEhEKCUNhc3RTcGVlZBglIAEoBRIUCgxEZWZhdWx0",
            "U2tpbGwYJiABKAUSDwoHU2tpbGwwMRgnIAEoBRIPCgdTa2lsbDAyGCggASgF",
            "EhIKCkJveENydXNoZXIYKSABKAUSFwoPRXNjYXBlRGVkdWN0aW9uGCogASgF",
            "EhUKDUhpZGVBbmdlclZpZXcYKyABKAUiTwoTTW9uc3RlckNvbmZfTW9uc3Rl",
            "chI4CgdyZWNvcmRzGAEgAygLMicuWGxzeENvbnZlcnQuTW9uc3RlckNvbmZf",
            "TW9uc3Rlcl9SZWNvcmRCIKoCHUV4Y2VsQ29udmVydC5BdXRvLk1vbnN0ZXJD",
            "b25mYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ExcelConvert.Auto.MonsterConf.MonsterConf_Monster_Record), global::ExcelConvert.Auto.MonsterConf.MonsterConf_Monster_Record.Parser, new[]{ "MonsterId", "Name", "Avatar", "MonsterType", "MonsterType1", "MonsterType2", "AvatarSize", "Radius", "MassLevel", "MoveSpeed", "MoveType", "NoBlocked", "AIStrategy", "AttackRangeType", "AttackRadius", "AttackAngle", "AttackWidth", "AttackHeight", "AttackYOffset", "CostIncrease", "HP", "Attack", "PhysicsDefend", "MagicDefend", "HitRate", "DodgeRate", "Crit", "CriticalStrike", "Injury", "HarmReduction", "StunnedResistance", "FrozenResistance", "UnmovableResistance", "SilencedResistance", "DisarmedResistance", "TreatmentCoefficient", "CastSpeed", "DefaultSkill", "Skill01", "Skill02", "BoxCrusher", "EscapeDeduction", "HideAngerView" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExcelConvert.Auto.MonsterConf.MonsterConf_Monster), global::ExcelConvert.Auto.MonsterConf.MonsterConf_Monster.Parser, new[]{ "Records" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MonsterConf_Monster_Record : pb::IMessage<MonsterConf_Monster_Record> {
    private static readonly pb::MessageParser<MonsterConf_Monster_Record> _parser = new pb::MessageParser<MonsterConf_Monster_Record>(() => new MonsterConf_Monster_Record());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterConf_Monster_Record> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExcelConvert.Auto.MonsterConf.MonsterConfMonsterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterConf_Monster_Record() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterConf_Monster_Record(MonsterConf_Monster_Record other) : this() {
      monsterId_ = other.monsterId_;
      name_ = other.name_;
      avatar_ = other.avatar_;
      monsterType_ = other.monsterType_;
      monsterType1_ = other.monsterType1_;
      monsterType2_ = other.monsterType2_;
      avatarSize_ = other.avatarSize_;
      radius_ = other.radius_;
      massLevel_ = other.massLevel_;
      moveSpeed_ = other.moveSpeed_;
      moveType_ = other.moveType_;
      noBlocked_ = other.noBlocked_;
      aIStrategy_ = other.aIStrategy_;
      attackRangeType_ = other.attackRangeType_;
      attackRadius_ = other.attackRadius_;
      attackAngle_ = other.attackAngle_;
      attackWidth_ = other.attackWidth_;
      attackHeight_ = other.attackHeight_;
      attackYOffset_ = other.attackYOffset_;
      costIncrease_ = other.costIncrease_;
      hP_ = other.hP_;
      attack_ = other.attack_;
      physicsDefend_ = other.physicsDefend_;
      magicDefend_ = other.magicDefend_;
      hitRate_ = other.hitRate_;
      dodgeRate_ = other.dodgeRate_;
      crit_ = other.crit_;
      criticalStrike_ = other.criticalStrike_;
      injury_ = other.injury_;
      harmReduction_ = other.harmReduction_;
      stunnedResistance_ = other.stunnedResistance_;
      frozenResistance_ = other.frozenResistance_;
      unmovableResistance_ = other.unmovableResistance_;
      silencedResistance_ = other.silencedResistance_;
      disarmedResistance_ = other.disarmedResistance_;
      treatmentCoefficient_ = other.treatmentCoefficient_;
      castSpeed_ = other.castSpeed_;
      defaultSkill_ = other.defaultSkill_;
      skill01_ = other.skill01_;
      skill02_ = other.skill02_;
      boxCrusher_ = other.boxCrusher_;
      escapeDeduction_ = other.escapeDeduction_;
      hideAngerView_ = other.hideAngerView_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterConf_Monster_Record Clone() {
      return new MonsterConf_Monster_Record(this);
    }

    /// <summary>Field number for the "MonsterId" field.</summary>
    public const int MonsterIdFieldNumber = 1;
    private int monsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MonsterType" field.</summary>
    public const int MonsterTypeFieldNumber = 4;
    private int monsterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterType {
      get { return monsterType_; }
      set {
        monsterType_ = value;
      }
    }

    /// <summary>Field number for the "MonsterType1" field.</summary>
    public const int MonsterType1FieldNumber = 5;
    private int monsterType1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterType1 {
      get { return monsterType1_; }
      set {
        monsterType1_ = value;
      }
    }

    /// <summary>Field number for the "MonsterType2" field.</summary>
    public const int MonsterType2FieldNumber = 6;
    private int monsterType2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterType2 {
      get { return monsterType2_; }
      set {
        monsterType2_ = value;
      }
    }

    /// <summary>Field number for the "AvatarSize" field.</summary>
    public const int AvatarSizeFieldNumber = 7;
    private int avatarSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvatarSize {
      get { return avatarSize_; }
      set {
        avatarSize_ = value;
      }
    }

    /// <summary>Field number for the "Radius" field.</summary>
    public const int RadiusFieldNumber = 8;
    private int radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "MassLevel" field.</summary>
    public const int MassLevelFieldNumber = 9;
    private int massLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MassLevel {
      get { return massLevel_; }
      set {
        massLevel_ = value;
      }
    }

    /// <summary>Field number for the "MoveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 10;
    private int moveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "MoveType" field.</summary>
    public const int MoveTypeFieldNumber = 11;
    private int moveType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveType {
      get { return moveType_; }
      set {
        moveType_ = value;
      }
    }

    /// <summary>Field number for the "NoBlocked" field.</summary>
    public const int NoBlockedFieldNumber = 12;
    private int noBlocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoBlocked {
      get { return noBlocked_; }
      set {
        noBlocked_ = value;
      }
    }

    /// <summary>Field number for the "AIStrategy" field.</summary>
    public const int AIStrategyFieldNumber = 13;
    private string aIStrategy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AIStrategy {
      get { return aIStrategy_; }
      set {
        aIStrategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AttackRangeType" field.</summary>
    public const int AttackRangeTypeFieldNumber = 14;
    private int attackRangeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackRangeType {
      get { return attackRangeType_; }
      set {
        attackRangeType_ = value;
      }
    }

    /// <summary>Field number for the "AttackRadius" field.</summary>
    public const int AttackRadiusFieldNumber = 15;
    private int attackRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackRadius {
      get { return attackRadius_; }
      set {
        attackRadius_ = value;
      }
    }

    /// <summary>Field number for the "AttackAngle" field.</summary>
    public const int AttackAngleFieldNumber = 16;
    private int attackAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackAngle {
      get { return attackAngle_; }
      set {
        attackAngle_ = value;
      }
    }

    /// <summary>Field number for the "AttackWidth" field.</summary>
    public const int AttackWidthFieldNumber = 17;
    private int attackWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackWidth {
      get { return attackWidth_; }
      set {
        attackWidth_ = value;
      }
    }

    /// <summary>Field number for the "AttackHeight" field.</summary>
    public const int AttackHeightFieldNumber = 18;
    private int attackHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackHeight {
      get { return attackHeight_; }
      set {
        attackHeight_ = value;
      }
    }

    /// <summary>Field number for the "AttackYOffset" field.</summary>
    public const int AttackYOffsetFieldNumber = 19;
    private int attackYOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackYOffset {
      get { return attackYOffset_; }
      set {
        attackYOffset_ = value;
      }
    }

    /// <summary>Field number for the "CostIncrease" field.</summary>
    public const int CostIncreaseFieldNumber = 20;
    private int costIncrease_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostIncrease {
      get { return costIncrease_; }
      set {
        costIncrease_ = value;
      }
    }

    /// <summary>Field number for the "HP" field.</summary>
    public const int HPFieldNumber = 21;
    private int hP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HP {
      get { return hP_; }
      set {
        hP_ = value;
      }
    }

    /// <summary>Field number for the "Attack" field.</summary>
    public const int AttackFieldNumber = 22;
    private int attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "PhysicsDefend" field.</summary>
    public const int PhysicsDefendFieldNumber = 23;
    private int physicsDefend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PhysicsDefend {
      get { return physicsDefend_; }
      set {
        physicsDefend_ = value;
      }
    }

    /// <summary>Field number for the "MagicDefend" field.</summary>
    public const int MagicDefendFieldNumber = 24;
    private int magicDefend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicDefend {
      get { return magicDefend_; }
      set {
        magicDefend_ = value;
      }
    }

    /// <summary>Field number for the "HitRate" field.</summary>
    public const int HitRateFieldNumber = 25;
    private int hitRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitRate {
      get { return hitRate_; }
      set {
        hitRate_ = value;
      }
    }

    /// <summary>Field number for the "DodgeRate" field.</summary>
    public const int DodgeRateFieldNumber = 26;
    private int dodgeRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DodgeRate {
      get { return dodgeRate_; }
      set {
        dodgeRate_ = value;
      }
    }

    /// <summary>Field number for the "Crit" field.</summary>
    public const int CritFieldNumber = 27;
    private int crit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Crit {
      get { return crit_; }
      set {
        crit_ = value;
      }
    }

    /// <summary>Field number for the "CriticalStrike" field.</summary>
    public const int CriticalStrikeFieldNumber = 28;
    private int criticalStrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CriticalStrike {
      get { return criticalStrike_; }
      set {
        criticalStrike_ = value;
      }
    }

    /// <summary>Field number for the "Injury" field.</summary>
    public const int InjuryFieldNumber = 29;
    private int injury_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Injury {
      get { return injury_; }
      set {
        injury_ = value;
      }
    }

    /// <summary>Field number for the "HarmReduction" field.</summary>
    public const int HarmReductionFieldNumber = 30;
    private int harmReduction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HarmReduction {
      get { return harmReduction_; }
      set {
        harmReduction_ = value;
      }
    }

    /// <summary>Field number for the "StunnedResistance" field.</summary>
    public const int StunnedResistanceFieldNumber = 31;
    private int stunnedResistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StunnedResistance {
      get { return stunnedResistance_; }
      set {
        stunnedResistance_ = value;
      }
    }

    /// <summary>Field number for the "FrozenResistance" field.</summary>
    public const int FrozenResistanceFieldNumber = 32;
    private int frozenResistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrozenResistance {
      get { return frozenResistance_; }
      set {
        frozenResistance_ = value;
      }
    }

    /// <summary>Field number for the "UnmovableResistance" field.</summary>
    public const int UnmovableResistanceFieldNumber = 33;
    private int unmovableResistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnmovableResistance {
      get { return unmovableResistance_; }
      set {
        unmovableResistance_ = value;
      }
    }

    /// <summary>Field number for the "SilencedResistance" field.</summary>
    public const int SilencedResistanceFieldNumber = 34;
    private int silencedResistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SilencedResistance {
      get { return silencedResistance_; }
      set {
        silencedResistance_ = value;
      }
    }

    /// <summary>Field number for the "DisarmedResistance" field.</summary>
    public const int DisarmedResistanceFieldNumber = 35;
    private int disarmedResistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DisarmedResistance {
      get { return disarmedResistance_; }
      set {
        disarmedResistance_ = value;
      }
    }

    /// <summary>Field number for the "TreatmentCoefficient" field.</summary>
    public const int TreatmentCoefficientFieldNumber = 36;
    private int treatmentCoefficient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TreatmentCoefficient {
      get { return treatmentCoefficient_; }
      set {
        treatmentCoefficient_ = value;
      }
    }

    /// <summary>Field number for the "CastSpeed" field.</summary>
    public const int CastSpeedFieldNumber = 37;
    private int castSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CastSpeed {
      get { return castSpeed_; }
      set {
        castSpeed_ = value;
      }
    }

    /// <summary>Field number for the "DefaultSkill" field.</summary>
    public const int DefaultSkillFieldNumber = 38;
    private int defaultSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultSkill {
      get { return defaultSkill_; }
      set {
        defaultSkill_ = value;
      }
    }

    /// <summary>Field number for the "Skill01" field.</summary>
    public const int Skill01FieldNumber = 39;
    private int skill01_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skill01 {
      get { return skill01_; }
      set {
        skill01_ = value;
      }
    }

    /// <summary>Field number for the "Skill02" field.</summary>
    public const int Skill02FieldNumber = 40;
    private int skill02_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skill02 {
      get { return skill02_; }
      set {
        skill02_ = value;
      }
    }

    /// <summary>Field number for the "BoxCrusher" field.</summary>
    public const int BoxCrusherFieldNumber = 41;
    private int boxCrusher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoxCrusher {
      get { return boxCrusher_; }
      set {
        boxCrusher_ = value;
      }
    }

    /// <summary>Field number for the "EscapeDeduction" field.</summary>
    public const int EscapeDeductionFieldNumber = 42;
    private int escapeDeduction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EscapeDeduction {
      get { return escapeDeduction_; }
      set {
        escapeDeduction_ = value;
      }
    }

    /// <summary>Field number for the "HideAngerView" field.</summary>
    public const int HideAngerViewFieldNumber = 43;
    private int hideAngerView_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HideAngerView {
      get { return hideAngerView_; }
      set {
        hideAngerView_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterConf_Monster_Record);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterConf_Monster_Record other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonsterId != other.MonsterId) return false;
      if (Name != other.Name) return false;
      if (Avatar != other.Avatar) return false;
      if (MonsterType != other.MonsterType) return false;
      if (MonsterType1 != other.MonsterType1) return false;
      if (MonsterType2 != other.MonsterType2) return false;
      if (AvatarSize != other.AvatarSize) return false;
      if (Radius != other.Radius) return false;
      if (MassLevel != other.MassLevel) return false;
      if (MoveSpeed != other.MoveSpeed) return false;
      if (MoveType != other.MoveType) return false;
      if (NoBlocked != other.NoBlocked) return false;
      if (AIStrategy != other.AIStrategy) return false;
      if (AttackRangeType != other.AttackRangeType) return false;
      if (AttackRadius != other.AttackRadius) return false;
      if (AttackAngle != other.AttackAngle) return false;
      if (AttackWidth != other.AttackWidth) return false;
      if (AttackHeight != other.AttackHeight) return false;
      if (AttackYOffset != other.AttackYOffset) return false;
      if (CostIncrease != other.CostIncrease) return false;
      if (HP != other.HP) return false;
      if (Attack != other.Attack) return false;
      if (PhysicsDefend != other.PhysicsDefend) return false;
      if (MagicDefend != other.MagicDefend) return false;
      if (HitRate != other.HitRate) return false;
      if (DodgeRate != other.DodgeRate) return false;
      if (Crit != other.Crit) return false;
      if (CriticalStrike != other.CriticalStrike) return false;
      if (Injury != other.Injury) return false;
      if (HarmReduction != other.HarmReduction) return false;
      if (StunnedResistance != other.StunnedResistance) return false;
      if (FrozenResistance != other.FrozenResistance) return false;
      if (UnmovableResistance != other.UnmovableResistance) return false;
      if (SilencedResistance != other.SilencedResistance) return false;
      if (DisarmedResistance != other.DisarmedResistance) return false;
      if (TreatmentCoefficient != other.TreatmentCoefficient) return false;
      if (CastSpeed != other.CastSpeed) return false;
      if (DefaultSkill != other.DefaultSkill) return false;
      if (Skill01 != other.Skill01) return false;
      if (Skill02 != other.Skill02) return false;
      if (BoxCrusher != other.BoxCrusher) return false;
      if (EscapeDeduction != other.EscapeDeduction) return false;
      if (HideAngerView != other.HideAngerView) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (MonsterType != 0) hash ^= MonsterType.GetHashCode();
      if (MonsterType1 != 0) hash ^= MonsterType1.GetHashCode();
      if (MonsterType2 != 0) hash ^= MonsterType2.GetHashCode();
      if (AvatarSize != 0) hash ^= AvatarSize.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (MassLevel != 0) hash ^= MassLevel.GetHashCode();
      if (MoveSpeed != 0) hash ^= MoveSpeed.GetHashCode();
      if (MoveType != 0) hash ^= MoveType.GetHashCode();
      if (NoBlocked != 0) hash ^= NoBlocked.GetHashCode();
      if (AIStrategy.Length != 0) hash ^= AIStrategy.GetHashCode();
      if (AttackRangeType != 0) hash ^= AttackRangeType.GetHashCode();
      if (AttackRadius != 0) hash ^= AttackRadius.GetHashCode();
      if (AttackAngle != 0) hash ^= AttackAngle.GetHashCode();
      if (AttackWidth != 0) hash ^= AttackWidth.GetHashCode();
      if (AttackHeight != 0) hash ^= AttackHeight.GetHashCode();
      if (AttackYOffset != 0) hash ^= AttackYOffset.GetHashCode();
      if (CostIncrease != 0) hash ^= CostIncrease.GetHashCode();
      if (HP != 0) hash ^= HP.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (PhysicsDefend != 0) hash ^= PhysicsDefend.GetHashCode();
      if (MagicDefend != 0) hash ^= MagicDefend.GetHashCode();
      if (HitRate != 0) hash ^= HitRate.GetHashCode();
      if (DodgeRate != 0) hash ^= DodgeRate.GetHashCode();
      if (Crit != 0) hash ^= Crit.GetHashCode();
      if (CriticalStrike != 0) hash ^= CriticalStrike.GetHashCode();
      if (Injury != 0) hash ^= Injury.GetHashCode();
      if (HarmReduction != 0) hash ^= HarmReduction.GetHashCode();
      if (StunnedResistance != 0) hash ^= StunnedResistance.GetHashCode();
      if (FrozenResistance != 0) hash ^= FrozenResistance.GetHashCode();
      if (UnmovableResistance != 0) hash ^= UnmovableResistance.GetHashCode();
      if (SilencedResistance != 0) hash ^= SilencedResistance.GetHashCode();
      if (DisarmedResistance != 0) hash ^= DisarmedResistance.GetHashCode();
      if (TreatmentCoefficient != 0) hash ^= TreatmentCoefficient.GetHashCode();
      if (CastSpeed != 0) hash ^= CastSpeed.GetHashCode();
      if (DefaultSkill != 0) hash ^= DefaultSkill.GetHashCode();
      if (Skill01 != 0) hash ^= Skill01.GetHashCode();
      if (Skill02 != 0) hash ^= Skill02.GetHashCode();
      if (BoxCrusher != 0) hash ^= BoxCrusher.GetHashCode();
      if (EscapeDeduction != 0) hash ^= EscapeDeduction.GetHashCode();
      if (HideAngerView != 0) hash ^= HideAngerView.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MonsterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
      if (MonsterType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MonsterType);
      }
      if (MonsterType1 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MonsterType1);
      }
      if (MonsterType2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MonsterType2);
      }
      if (AvatarSize != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AvatarSize);
      }
      if (Radius != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Radius);
      }
      if (MassLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MassLevel);
      }
      if (MoveSpeed != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MoveSpeed);
      }
      if (MoveType != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MoveType);
      }
      if (NoBlocked != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(NoBlocked);
      }
      if (AIStrategy.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(AIStrategy);
      }
      if (AttackRangeType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(AttackRangeType);
      }
      if (AttackRadius != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(AttackRadius);
      }
      if (AttackAngle != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AttackAngle);
      }
      if (AttackWidth != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(AttackWidth);
      }
      if (AttackHeight != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(AttackHeight);
      }
      if (AttackYOffset != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(AttackYOffset);
      }
      if (CostIncrease != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(CostIncrease);
      }
      if (HP != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(HP);
      }
      if (Attack != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Attack);
      }
      if (PhysicsDefend != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(PhysicsDefend);
      }
      if (MagicDefend != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(MagicDefend);
      }
      if (HitRate != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(HitRate);
      }
      if (DodgeRate != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(DodgeRate);
      }
      if (Crit != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(Crit);
      }
      if (CriticalStrike != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(CriticalStrike);
      }
      if (Injury != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(Injury);
      }
      if (HarmReduction != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(HarmReduction);
      }
      if (StunnedResistance != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(StunnedResistance);
      }
      if (FrozenResistance != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(FrozenResistance);
      }
      if (UnmovableResistance != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(UnmovableResistance);
      }
      if (SilencedResistance != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(SilencedResistance);
      }
      if (DisarmedResistance != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(DisarmedResistance);
      }
      if (TreatmentCoefficient != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(TreatmentCoefficient);
      }
      if (CastSpeed != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(CastSpeed);
      }
      if (DefaultSkill != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(DefaultSkill);
      }
      if (Skill01 != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(Skill01);
      }
      if (Skill02 != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(Skill02);
      }
      if (BoxCrusher != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(BoxCrusher);
      }
      if (EscapeDeduction != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(EscapeDeduction);
      }
      if (HideAngerView != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(HideAngerView);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (MonsterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterType);
      }
      if (MonsterType1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterType1);
      }
      if (MonsterType2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterType2);
      }
      if (AvatarSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvatarSize);
      }
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radius);
      }
      if (MassLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MassLevel);
      }
      if (MoveSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      if (MoveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveType);
      }
      if (NoBlocked != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NoBlocked);
      }
      if (AIStrategy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AIStrategy);
      }
      if (AttackRangeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackRangeType);
      }
      if (AttackRadius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackRadius);
      }
      if (AttackAngle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackAngle);
      }
      if (AttackWidth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackWidth);
      }
      if (AttackHeight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackHeight);
      }
      if (AttackYOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackYOffset);
      }
      if (CostIncrease != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CostIncrease);
      }
      if (HP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HP);
      }
      if (Attack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (PhysicsDefend != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PhysicsDefend);
      }
      if (MagicDefend != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MagicDefend);
      }
      if (HitRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitRate);
      }
      if (DodgeRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DodgeRate);
      }
      if (Crit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Crit);
      }
      if (CriticalStrike != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CriticalStrike);
      }
      if (Injury != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Injury);
      }
      if (HarmReduction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HarmReduction);
      }
      if (StunnedResistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StunnedResistance);
      }
      if (FrozenResistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrozenResistance);
      }
      if (UnmovableResistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnmovableResistance);
      }
      if (SilencedResistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SilencedResistance);
      }
      if (DisarmedResistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DisarmedResistance);
      }
      if (TreatmentCoefficient != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TreatmentCoefficient);
      }
      if (CastSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CastSpeed);
      }
      if (DefaultSkill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultSkill);
      }
      if (Skill01 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Skill01);
      }
      if (Skill02 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Skill02);
      }
      if (BoxCrusher != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoxCrusher);
      }
      if (EscapeDeduction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EscapeDeduction);
      }
      if (HideAngerView != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HideAngerView);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterConf_Monster_Record other) {
      if (other == null) {
        return;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.MonsterType != 0) {
        MonsterType = other.MonsterType;
      }
      if (other.MonsterType1 != 0) {
        MonsterType1 = other.MonsterType1;
      }
      if (other.MonsterType2 != 0) {
        MonsterType2 = other.MonsterType2;
      }
      if (other.AvatarSize != 0) {
        AvatarSize = other.AvatarSize;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.MassLevel != 0) {
        MassLevel = other.MassLevel;
      }
      if (other.MoveSpeed != 0) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.MoveType != 0) {
        MoveType = other.MoveType;
      }
      if (other.NoBlocked != 0) {
        NoBlocked = other.NoBlocked;
      }
      if (other.AIStrategy.Length != 0) {
        AIStrategy = other.AIStrategy;
      }
      if (other.AttackRangeType != 0) {
        AttackRangeType = other.AttackRangeType;
      }
      if (other.AttackRadius != 0) {
        AttackRadius = other.AttackRadius;
      }
      if (other.AttackAngle != 0) {
        AttackAngle = other.AttackAngle;
      }
      if (other.AttackWidth != 0) {
        AttackWidth = other.AttackWidth;
      }
      if (other.AttackHeight != 0) {
        AttackHeight = other.AttackHeight;
      }
      if (other.AttackYOffset != 0) {
        AttackYOffset = other.AttackYOffset;
      }
      if (other.CostIncrease != 0) {
        CostIncrease = other.CostIncrease;
      }
      if (other.HP != 0) {
        HP = other.HP;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.PhysicsDefend != 0) {
        PhysicsDefend = other.PhysicsDefend;
      }
      if (other.MagicDefend != 0) {
        MagicDefend = other.MagicDefend;
      }
      if (other.HitRate != 0) {
        HitRate = other.HitRate;
      }
      if (other.DodgeRate != 0) {
        DodgeRate = other.DodgeRate;
      }
      if (other.Crit != 0) {
        Crit = other.Crit;
      }
      if (other.CriticalStrike != 0) {
        CriticalStrike = other.CriticalStrike;
      }
      if (other.Injury != 0) {
        Injury = other.Injury;
      }
      if (other.HarmReduction != 0) {
        HarmReduction = other.HarmReduction;
      }
      if (other.StunnedResistance != 0) {
        StunnedResistance = other.StunnedResistance;
      }
      if (other.FrozenResistance != 0) {
        FrozenResistance = other.FrozenResistance;
      }
      if (other.UnmovableResistance != 0) {
        UnmovableResistance = other.UnmovableResistance;
      }
      if (other.SilencedResistance != 0) {
        SilencedResistance = other.SilencedResistance;
      }
      if (other.DisarmedResistance != 0) {
        DisarmedResistance = other.DisarmedResistance;
      }
      if (other.TreatmentCoefficient != 0) {
        TreatmentCoefficient = other.TreatmentCoefficient;
      }
      if (other.CastSpeed != 0) {
        CastSpeed = other.CastSpeed;
      }
      if (other.DefaultSkill != 0) {
        DefaultSkill = other.DefaultSkill;
      }
      if (other.Skill01 != 0) {
        Skill01 = other.Skill01;
      }
      if (other.Skill02 != 0) {
        Skill02 = other.Skill02;
      }
      if (other.BoxCrusher != 0) {
        BoxCrusher = other.BoxCrusher;
      }
      if (other.EscapeDeduction != 0) {
        EscapeDeduction = other.EscapeDeduction;
      }
      if (other.HideAngerView != 0) {
        HideAngerView = other.HideAngerView;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonsterId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
          case 32: {
            MonsterType = input.ReadInt32();
            break;
          }
          case 40: {
            MonsterType1 = input.ReadInt32();
            break;
          }
          case 48: {
            MonsterType2 = input.ReadInt32();
            break;
          }
          case 56: {
            AvatarSize = input.ReadInt32();
            break;
          }
          case 64: {
            Radius = input.ReadInt32();
            break;
          }
          case 72: {
            MassLevel = input.ReadInt32();
            break;
          }
          case 80: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 88: {
            MoveType = input.ReadInt32();
            break;
          }
          case 96: {
            NoBlocked = input.ReadInt32();
            break;
          }
          case 106: {
            AIStrategy = input.ReadString();
            break;
          }
          case 112: {
            AttackRangeType = input.ReadInt32();
            break;
          }
          case 120: {
            AttackRadius = input.ReadInt32();
            break;
          }
          case 128: {
            AttackAngle = input.ReadInt32();
            break;
          }
          case 136: {
            AttackWidth = input.ReadInt32();
            break;
          }
          case 144: {
            AttackHeight = input.ReadInt32();
            break;
          }
          case 152: {
            AttackYOffset = input.ReadInt32();
            break;
          }
          case 160: {
            CostIncrease = input.ReadInt32();
            break;
          }
          case 168: {
            HP = input.ReadInt32();
            break;
          }
          case 176: {
            Attack = input.ReadInt32();
            break;
          }
          case 184: {
            PhysicsDefend = input.ReadInt32();
            break;
          }
          case 192: {
            MagicDefend = input.ReadInt32();
            break;
          }
          case 200: {
            HitRate = input.ReadInt32();
            break;
          }
          case 208: {
            DodgeRate = input.ReadInt32();
            break;
          }
          case 216: {
            Crit = input.ReadInt32();
            break;
          }
          case 224: {
            CriticalStrike = input.ReadInt32();
            break;
          }
          case 232: {
            Injury = input.ReadInt32();
            break;
          }
          case 240: {
            HarmReduction = input.ReadInt32();
            break;
          }
          case 248: {
            StunnedResistance = input.ReadInt32();
            break;
          }
          case 256: {
            FrozenResistance = input.ReadInt32();
            break;
          }
          case 264: {
            UnmovableResistance = input.ReadInt32();
            break;
          }
          case 272: {
            SilencedResistance = input.ReadInt32();
            break;
          }
          case 280: {
            DisarmedResistance = input.ReadInt32();
            break;
          }
          case 288: {
            TreatmentCoefficient = input.ReadInt32();
            break;
          }
          case 296: {
            CastSpeed = input.ReadInt32();
            break;
          }
          case 304: {
            DefaultSkill = input.ReadInt32();
            break;
          }
          case 312: {
            Skill01 = input.ReadInt32();
            break;
          }
          case 320: {
            Skill02 = input.ReadInt32();
            break;
          }
          case 328: {
            BoxCrusher = input.ReadInt32();
            break;
          }
          case 336: {
            EscapeDeduction = input.ReadInt32();
            break;
          }
          case 344: {
            HideAngerView = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterConf_Monster : pb::IMessage<MonsterConf_Monster> {
    private static readonly pb::MessageParser<MonsterConf_Monster> _parser = new pb::MessageParser<MonsterConf_Monster>(() => new MonsterConf_Monster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterConf_Monster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExcelConvert.Auto.MonsterConf.MonsterConfMonsterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterConf_Monster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterConf_Monster(MonsterConf_Monster other) : this() {
      records_ = other.records_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterConf_Monster Clone() {
      return new MonsterConf_Monster(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ExcelConvert.Auto.MonsterConf.MonsterConf_Monster_Record> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::ExcelConvert.Auto.MonsterConf.MonsterConf_Monster_Record.Parser);
    private readonly pbc::RepeatedField<global::ExcelConvert.Auto.MonsterConf.MonsterConf_Monster_Record> records_ = new pbc::RepeatedField<global::ExcelConvert.Auto.MonsterConf.MonsterConf_Monster_Record>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ExcelConvert.Auto.MonsterConf.MonsterConf_Monster_Record> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterConf_Monster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterConf_Monster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterConf_Monster other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
