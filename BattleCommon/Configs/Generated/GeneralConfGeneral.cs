// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GeneralConf_General.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ExcelConvert.Auto.GeneralConf {

  /// <summary>Holder for reflection information generated from GeneralConf_General.proto</summary>
  public static partial class GeneralConfGeneralReflection {

    #region Descriptor
    /// <summary>File descriptor for GeneralConf_General.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GeneralConfGeneralReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlHZW5lcmFsQ29uZl9HZW5lcmFsLnByb3RvEgtYbHN4Q29udmVydCK0BQoa",
            "R2VuZXJhbENvbmZfR2VuZXJhbF9SZWNvcmQSEQoJR2VuZXJhbElkGAEgASgF",
            "EgwKBE5hbWUYAiABKAkSDgoGQXZhdGFyGAMgASgJEg4KBlJhZGl1cxgEIAEo",
            "BRIPCgdRdWFsaXR5GAUgASgFEg4KBkNhcmVlchgGIAEoBRISCgpCbG9ja0Nv",
            "dW50GAcgASgFEhIKCkRlcGxveUNvc3QYCCABKAUSEgoKUmVtb3ZlQ29zdBgJ",
            "IAEoBRIVCg1EZXBsb3lBZ2FpbkNEGAogASgFEhcKD0RlcGxveUFnYWluQ29z",
            "dBgLIAEoBRISCgpEZXBsb3lUeXBlGAwgASgFEhIKCkFJU3RyYXRlZ3kYDSAB",
            "KAkSEQoJTW92ZVNwZWVkGA4gASgFEhAKCE1vdmVUeXBlGA8gASgFEhQKDEdl",
            "bmVyYWxUeXBlMRgQIAEoBRIUCgxHZW5lcmFsVHlwZTIYESABKAUSEQoJQ2Fz",
            "dFNwZWVkGBIgASgFEhQKDERlZmF1bHRTa2lsbBgTIAEoBRIZChFTdHVubmVk",
            "UmVzaXN0YW5jZRgUIAEoBRIYChBGcm96ZW5SZXNpc3RhbmNlGBUgASgFEhsK",
            "E1VubW92YWJsZVJlc2lzdGFuY2UYFiABKAUSGgoSU2lsZW5jZWRSZXNpc3Rh",
            "bmNlGBcgASgFEhoKEkRpc2FybWVkUmVzaXN0YW5jZRgYIAEoBRIcChRUcmVh",
            "dG1lbnRDb2VmZmljaWVudBgZIAEoBRIVCg1IaWRlQW5nZXJWaWV3GBogASgF",
            "EhgKEEFwcGVhckVmZmVjdFBhdGgYGyABKAkSHgoWQXBwZWFyRWZmZWN0TW91",
            "bnRQb2ludBgcIAEoCRIWCg5IYXNBcHBlYXJBbmltYRgdIAEoBRIVCg1IYXND",
            "YXN0RWZmZWN0GB4gASgFIk8KE0dlbmVyYWxDb25mX0dlbmVyYWwSOAoHcmVj",
            "b3JkcxgBIAMoCzInLlhsc3hDb252ZXJ0LkdlbmVyYWxDb25mX0dlbmVyYWxf",
            "UmVjb3JkQiCqAh1FeGNlbENvbnZlcnQuQXV0by5HZW5lcmFsQ29uZmIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ExcelConvert.Auto.GeneralConf.GeneralConf_General_Record), global::ExcelConvert.Auto.GeneralConf.GeneralConf_General_Record.Parser, new[]{ "GeneralId", "Name", "Avatar", "Radius", "Quality", "Career", "BlockCount", "DeployCost", "RemoveCost", "DeployAgainCD", "DeployAgainCost", "DeployType", "AIStrategy", "MoveSpeed", "MoveType", "GeneralType1", "GeneralType2", "CastSpeed", "DefaultSkill", "StunnedResistance", "FrozenResistance", "UnmovableResistance", "SilencedResistance", "DisarmedResistance", "TreatmentCoefficient", "HideAngerView", "AppearEffectPath", "AppearEffectMountPoint", "HasAppearAnima", "HasCastEffect" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExcelConvert.Auto.GeneralConf.GeneralConf_General), global::ExcelConvert.Auto.GeneralConf.GeneralConf_General.Parser, new[]{ "Records" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GeneralConf_General_Record : pb::IMessage<GeneralConf_General_Record> {
    private static readonly pb::MessageParser<GeneralConf_General_Record> _parser = new pb::MessageParser<GeneralConf_General_Record>(() => new GeneralConf_General_Record());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeneralConf_General_Record> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExcelConvert.Auto.GeneralConf.GeneralConfGeneralReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralConf_General_Record() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralConf_General_Record(GeneralConf_General_Record other) : this() {
      generalId_ = other.generalId_;
      name_ = other.name_;
      avatar_ = other.avatar_;
      radius_ = other.radius_;
      quality_ = other.quality_;
      career_ = other.career_;
      blockCount_ = other.blockCount_;
      deployCost_ = other.deployCost_;
      removeCost_ = other.removeCost_;
      deployAgainCD_ = other.deployAgainCD_;
      deployAgainCost_ = other.deployAgainCost_;
      deployType_ = other.deployType_;
      aIStrategy_ = other.aIStrategy_;
      moveSpeed_ = other.moveSpeed_;
      moveType_ = other.moveType_;
      generalType1_ = other.generalType1_;
      generalType2_ = other.generalType2_;
      castSpeed_ = other.castSpeed_;
      defaultSkill_ = other.defaultSkill_;
      stunnedResistance_ = other.stunnedResistance_;
      frozenResistance_ = other.frozenResistance_;
      unmovableResistance_ = other.unmovableResistance_;
      silencedResistance_ = other.silencedResistance_;
      disarmedResistance_ = other.disarmedResistance_;
      treatmentCoefficient_ = other.treatmentCoefficient_;
      hideAngerView_ = other.hideAngerView_;
      appearEffectPath_ = other.appearEffectPath_;
      appearEffectMountPoint_ = other.appearEffectMountPoint_;
      hasAppearAnima_ = other.hasAppearAnima_;
      hasCastEffect_ = other.hasCastEffect_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralConf_General_Record Clone() {
      return new GeneralConf_General_Record(this);
    }

    /// <summary>Field number for the "GeneralId" field.</summary>
    public const int GeneralIdFieldNumber = 1;
    private int generalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GeneralId {
      get { return generalId_; }
      set {
        generalId_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Radius" field.</summary>
    public const int RadiusFieldNumber = 4;
    private int radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "Quality" field.</summary>
    public const int QualityFieldNumber = 5;
    private int quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "Career" field.</summary>
    public const int CareerFieldNumber = 6;
    private int career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "BlockCount" field.</summary>
    public const int BlockCountFieldNumber = 7;
    private int blockCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockCount {
      get { return blockCount_; }
      set {
        blockCount_ = value;
      }
    }

    /// <summary>Field number for the "DeployCost" field.</summary>
    public const int DeployCostFieldNumber = 8;
    private int deployCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeployCost {
      get { return deployCost_; }
      set {
        deployCost_ = value;
      }
    }

    /// <summary>Field number for the "RemoveCost" field.</summary>
    public const int RemoveCostFieldNumber = 9;
    private int removeCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemoveCost {
      get { return removeCost_; }
      set {
        removeCost_ = value;
      }
    }

    /// <summary>Field number for the "DeployAgainCD" field.</summary>
    public const int DeployAgainCDFieldNumber = 10;
    private int deployAgainCD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeployAgainCD {
      get { return deployAgainCD_; }
      set {
        deployAgainCD_ = value;
      }
    }

    /// <summary>Field number for the "DeployAgainCost" field.</summary>
    public const int DeployAgainCostFieldNumber = 11;
    private int deployAgainCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeployAgainCost {
      get { return deployAgainCost_; }
      set {
        deployAgainCost_ = value;
      }
    }

    /// <summary>Field number for the "DeployType" field.</summary>
    public const int DeployTypeFieldNumber = 12;
    private int deployType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeployType {
      get { return deployType_; }
      set {
        deployType_ = value;
      }
    }

    /// <summary>Field number for the "AIStrategy" field.</summary>
    public const int AIStrategyFieldNumber = 13;
    private string aIStrategy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AIStrategy {
      get { return aIStrategy_; }
      set {
        aIStrategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MoveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 14;
    private int moveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "MoveType" field.</summary>
    public const int MoveTypeFieldNumber = 15;
    private int moveType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveType {
      get { return moveType_; }
      set {
        moveType_ = value;
      }
    }

    /// <summary>Field number for the "GeneralType1" field.</summary>
    public const int GeneralType1FieldNumber = 16;
    private int generalType1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GeneralType1 {
      get { return generalType1_; }
      set {
        generalType1_ = value;
      }
    }

    /// <summary>Field number for the "GeneralType2" field.</summary>
    public const int GeneralType2FieldNumber = 17;
    private int generalType2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GeneralType2 {
      get { return generalType2_; }
      set {
        generalType2_ = value;
      }
    }

    /// <summary>Field number for the "CastSpeed" field.</summary>
    public const int CastSpeedFieldNumber = 18;
    private int castSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CastSpeed {
      get { return castSpeed_; }
      set {
        castSpeed_ = value;
      }
    }

    /// <summary>Field number for the "DefaultSkill" field.</summary>
    public const int DefaultSkillFieldNumber = 19;
    private int defaultSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultSkill {
      get { return defaultSkill_; }
      set {
        defaultSkill_ = value;
      }
    }

    /// <summary>Field number for the "StunnedResistance" field.</summary>
    public const int StunnedResistanceFieldNumber = 20;
    private int stunnedResistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StunnedResistance {
      get { return stunnedResistance_; }
      set {
        stunnedResistance_ = value;
      }
    }

    /// <summary>Field number for the "FrozenResistance" field.</summary>
    public const int FrozenResistanceFieldNumber = 21;
    private int frozenResistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrozenResistance {
      get { return frozenResistance_; }
      set {
        frozenResistance_ = value;
      }
    }

    /// <summary>Field number for the "UnmovableResistance" field.</summary>
    public const int UnmovableResistanceFieldNumber = 22;
    private int unmovableResistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnmovableResistance {
      get { return unmovableResistance_; }
      set {
        unmovableResistance_ = value;
      }
    }

    /// <summary>Field number for the "SilencedResistance" field.</summary>
    public const int SilencedResistanceFieldNumber = 23;
    private int silencedResistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SilencedResistance {
      get { return silencedResistance_; }
      set {
        silencedResistance_ = value;
      }
    }

    /// <summary>Field number for the "DisarmedResistance" field.</summary>
    public const int DisarmedResistanceFieldNumber = 24;
    private int disarmedResistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DisarmedResistance {
      get { return disarmedResistance_; }
      set {
        disarmedResistance_ = value;
      }
    }

    /// <summary>Field number for the "TreatmentCoefficient" field.</summary>
    public const int TreatmentCoefficientFieldNumber = 25;
    private int treatmentCoefficient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TreatmentCoefficient {
      get { return treatmentCoefficient_; }
      set {
        treatmentCoefficient_ = value;
      }
    }

    /// <summary>Field number for the "HideAngerView" field.</summary>
    public const int HideAngerViewFieldNumber = 26;
    private int hideAngerView_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HideAngerView {
      get { return hideAngerView_; }
      set {
        hideAngerView_ = value;
      }
    }

    /// <summary>Field number for the "AppearEffectPath" field.</summary>
    public const int AppearEffectPathFieldNumber = 27;
    private string appearEffectPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppearEffectPath {
      get { return appearEffectPath_; }
      set {
        appearEffectPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AppearEffectMountPoint" field.</summary>
    public const int AppearEffectMountPointFieldNumber = 28;
    private string appearEffectMountPoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppearEffectMountPoint {
      get { return appearEffectMountPoint_; }
      set {
        appearEffectMountPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HasAppearAnima" field.</summary>
    public const int HasAppearAnimaFieldNumber = 29;
    private int hasAppearAnima_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HasAppearAnima {
      get { return hasAppearAnima_; }
      set {
        hasAppearAnima_ = value;
      }
    }

    /// <summary>Field number for the "HasCastEffect" field.</summary>
    public const int HasCastEffectFieldNumber = 30;
    private int hasCastEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HasCastEffect {
      get { return hasCastEffect_; }
      set {
        hasCastEffect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeneralConf_General_Record);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeneralConf_General_Record other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GeneralId != other.GeneralId) return false;
      if (Name != other.Name) return false;
      if (Avatar != other.Avatar) return false;
      if (Radius != other.Radius) return false;
      if (Quality != other.Quality) return false;
      if (Career != other.Career) return false;
      if (BlockCount != other.BlockCount) return false;
      if (DeployCost != other.DeployCost) return false;
      if (RemoveCost != other.RemoveCost) return false;
      if (DeployAgainCD != other.DeployAgainCD) return false;
      if (DeployAgainCost != other.DeployAgainCost) return false;
      if (DeployType != other.DeployType) return false;
      if (AIStrategy != other.AIStrategy) return false;
      if (MoveSpeed != other.MoveSpeed) return false;
      if (MoveType != other.MoveType) return false;
      if (GeneralType1 != other.GeneralType1) return false;
      if (GeneralType2 != other.GeneralType2) return false;
      if (CastSpeed != other.CastSpeed) return false;
      if (DefaultSkill != other.DefaultSkill) return false;
      if (StunnedResistance != other.StunnedResistance) return false;
      if (FrozenResistance != other.FrozenResistance) return false;
      if (UnmovableResistance != other.UnmovableResistance) return false;
      if (SilencedResistance != other.SilencedResistance) return false;
      if (DisarmedResistance != other.DisarmedResistance) return false;
      if (TreatmentCoefficient != other.TreatmentCoefficient) return false;
      if (HideAngerView != other.HideAngerView) return false;
      if (AppearEffectPath != other.AppearEffectPath) return false;
      if (AppearEffectMountPoint != other.AppearEffectMountPoint) return false;
      if (HasAppearAnima != other.HasAppearAnima) return false;
      if (HasCastEffect != other.HasCastEffect) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GeneralId != 0) hash ^= GeneralId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (Career != 0) hash ^= Career.GetHashCode();
      if (BlockCount != 0) hash ^= BlockCount.GetHashCode();
      if (DeployCost != 0) hash ^= DeployCost.GetHashCode();
      if (RemoveCost != 0) hash ^= RemoveCost.GetHashCode();
      if (DeployAgainCD != 0) hash ^= DeployAgainCD.GetHashCode();
      if (DeployAgainCost != 0) hash ^= DeployAgainCost.GetHashCode();
      if (DeployType != 0) hash ^= DeployType.GetHashCode();
      if (AIStrategy.Length != 0) hash ^= AIStrategy.GetHashCode();
      if (MoveSpeed != 0) hash ^= MoveSpeed.GetHashCode();
      if (MoveType != 0) hash ^= MoveType.GetHashCode();
      if (GeneralType1 != 0) hash ^= GeneralType1.GetHashCode();
      if (GeneralType2 != 0) hash ^= GeneralType2.GetHashCode();
      if (CastSpeed != 0) hash ^= CastSpeed.GetHashCode();
      if (DefaultSkill != 0) hash ^= DefaultSkill.GetHashCode();
      if (StunnedResistance != 0) hash ^= StunnedResistance.GetHashCode();
      if (FrozenResistance != 0) hash ^= FrozenResistance.GetHashCode();
      if (UnmovableResistance != 0) hash ^= UnmovableResistance.GetHashCode();
      if (SilencedResistance != 0) hash ^= SilencedResistance.GetHashCode();
      if (DisarmedResistance != 0) hash ^= DisarmedResistance.GetHashCode();
      if (TreatmentCoefficient != 0) hash ^= TreatmentCoefficient.GetHashCode();
      if (HideAngerView != 0) hash ^= HideAngerView.GetHashCode();
      if (AppearEffectPath.Length != 0) hash ^= AppearEffectPath.GetHashCode();
      if (AppearEffectMountPoint.Length != 0) hash ^= AppearEffectMountPoint.GetHashCode();
      if (HasAppearAnima != 0) hash ^= HasAppearAnima.GetHashCode();
      if (HasCastEffect != 0) hash ^= HasCastEffect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GeneralId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GeneralId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
      if (Radius != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Radius);
      }
      if (Quality != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Quality);
      }
      if (Career != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Career);
      }
      if (BlockCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BlockCount);
      }
      if (DeployCost != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DeployCost);
      }
      if (RemoveCost != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RemoveCost);
      }
      if (DeployAgainCD != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DeployAgainCD);
      }
      if (DeployAgainCost != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DeployAgainCost);
      }
      if (DeployType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DeployType);
      }
      if (AIStrategy.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(AIStrategy);
      }
      if (MoveSpeed != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MoveSpeed);
      }
      if (MoveType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MoveType);
      }
      if (GeneralType1 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(GeneralType1);
      }
      if (GeneralType2 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(GeneralType2);
      }
      if (CastSpeed != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(CastSpeed);
      }
      if (DefaultSkill != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(DefaultSkill);
      }
      if (StunnedResistance != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(StunnedResistance);
      }
      if (FrozenResistance != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(FrozenResistance);
      }
      if (UnmovableResistance != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(UnmovableResistance);
      }
      if (SilencedResistance != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(SilencedResistance);
      }
      if (DisarmedResistance != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DisarmedResistance);
      }
      if (TreatmentCoefficient != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(TreatmentCoefficient);
      }
      if (HideAngerView != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(HideAngerView);
      }
      if (AppearEffectPath.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(AppearEffectPath);
      }
      if (AppearEffectMountPoint.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(AppearEffectMountPoint);
      }
      if (HasAppearAnima != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(HasAppearAnima);
      }
      if (HasCastEffect != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(HasCastEffect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GeneralId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GeneralId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radius);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Career);
      }
      if (BlockCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockCount);
      }
      if (DeployCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeployCost);
      }
      if (RemoveCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemoveCost);
      }
      if (DeployAgainCD != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeployAgainCD);
      }
      if (DeployAgainCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeployAgainCost);
      }
      if (DeployType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeployType);
      }
      if (AIStrategy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AIStrategy);
      }
      if (MoveSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      if (MoveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveType);
      }
      if (GeneralType1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GeneralType1);
      }
      if (GeneralType2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GeneralType2);
      }
      if (CastSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CastSpeed);
      }
      if (DefaultSkill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultSkill);
      }
      if (StunnedResistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StunnedResistance);
      }
      if (FrozenResistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrozenResistance);
      }
      if (UnmovableResistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnmovableResistance);
      }
      if (SilencedResistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SilencedResistance);
      }
      if (DisarmedResistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DisarmedResistance);
      }
      if (TreatmentCoefficient != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TreatmentCoefficient);
      }
      if (HideAngerView != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HideAngerView);
      }
      if (AppearEffectPath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AppearEffectPath);
      }
      if (AppearEffectMountPoint.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AppearEffectMountPoint);
      }
      if (HasAppearAnima != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HasAppearAnima);
      }
      if (HasCastEffect != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HasCastEffect);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeneralConf_General_Record other) {
      if (other == null) {
        return;
      }
      if (other.GeneralId != 0) {
        GeneralId = other.GeneralId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.Career != 0) {
        Career = other.Career;
      }
      if (other.BlockCount != 0) {
        BlockCount = other.BlockCount;
      }
      if (other.DeployCost != 0) {
        DeployCost = other.DeployCost;
      }
      if (other.RemoveCost != 0) {
        RemoveCost = other.RemoveCost;
      }
      if (other.DeployAgainCD != 0) {
        DeployAgainCD = other.DeployAgainCD;
      }
      if (other.DeployAgainCost != 0) {
        DeployAgainCost = other.DeployAgainCost;
      }
      if (other.DeployType != 0) {
        DeployType = other.DeployType;
      }
      if (other.AIStrategy.Length != 0) {
        AIStrategy = other.AIStrategy;
      }
      if (other.MoveSpeed != 0) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.MoveType != 0) {
        MoveType = other.MoveType;
      }
      if (other.GeneralType1 != 0) {
        GeneralType1 = other.GeneralType1;
      }
      if (other.GeneralType2 != 0) {
        GeneralType2 = other.GeneralType2;
      }
      if (other.CastSpeed != 0) {
        CastSpeed = other.CastSpeed;
      }
      if (other.DefaultSkill != 0) {
        DefaultSkill = other.DefaultSkill;
      }
      if (other.StunnedResistance != 0) {
        StunnedResistance = other.StunnedResistance;
      }
      if (other.FrozenResistance != 0) {
        FrozenResistance = other.FrozenResistance;
      }
      if (other.UnmovableResistance != 0) {
        UnmovableResistance = other.UnmovableResistance;
      }
      if (other.SilencedResistance != 0) {
        SilencedResistance = other.SilencedResistance;
      }
      if (other.DisarmedResistance != 0) {
        DisarmedResistance = other.DisarmedResistance;
      }
      if (other.TreatmentCoefficient != 0) {
        TreatmentCoefficient = other.TreatmentCoefficient;
      }
      if (other.HideAngerView != 0) {
        HideAngerView = other.HideAngerView;
      }
      if (other.AppearEffectPath.Length != 0) {
        AppearEffectPath = other.AppearEffectPath;
      }
      if (other.AppearEffectMountPoint.Length != 0) {
        AppearEffectMountPoint = other.AppearEffectMountPoint;
      }
      if (other.HasAppearAnima != 0) {
        HasAppearAnima = other.HasAppearAnima;
      }
      if (other.HasCastEffect != 0) {
        HasCastEffect = other.HasCastEffect;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GeneralId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
          case 32: {
            Radius = input.ReadInt32();
            break;
          }
          case 40: {
            Quality = input.ReadInt32();
            break;
          }
          case 48: {
            Career = input.ReadInt32();
            break;
          }
          case 56: {
            BlockCount = input.ReadInt32();
            break;
          }
          case 64: {
            DeployCost = input.ReadInt32();
            break;
          }
          case 72: {
            RemoveCost = input.ReadInt32();
            break;
          }
          case 80: {
            DeployAgainCD = input.ReadInt32();
            break;
          }
          case 88: {
            DeployAgainCost = input.ReadInt32();
            break;
          }
          case 96: {
            DeployType = input.ReadInt32();
            break;
          }
          case 106: {
            AIStrategy = input.ReadString();
            break;
          }
          case 112: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 120: {
            MoveType = input.ReadInt32();
            break;
          }
          case 128: {
            GeneralType1 = input.ReadInt32();
            break;
          }
          case 136: {
            GeneralType2 = input.ReadInt32();
            break;
          }
          case 144: {
            CastSpeed = input.ReadInt32();
            break;
          }
          case 152: {
            DefaultSkill = input.ReadInt32();
            break;
          }
          case 160: {
            StunnedResistance = input.ReadInt32();
            break;
          }
          case 168: {
            FrozenResistance = input.ReadInt32();
            break;
          }
          case 176: {
            UnmovableResistance = input.ReadInt32();
            break;
          }
          case 184: {
            SilencedResistance = input.ReadInt32();
            break;
          }
          case 192: {
            DisarmedResistance = input.ReadInt32();
            break;
          }
          case 200: {
            TreatmentCoefficient = input.ReadInt32();
            break;
          }
          case 208: {
            HideAngerView = input.ReadInt32();
            break;
          }
          case 218: {
            AppearEffectPath = input.ReadString();
            break;
          }
          case 226: {
            AppearEffectMountPoint = input.ReadString();
            break;
          }
          case 232: {
            HasAppearAnima = input.ReadInt32();
            break;
          }
          case 240: {
            HasCastEffect = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeneralConf_General : pb::IMessage<GeneralConf_General> {
    private static readonly pb::MessageParser<GeneralConf_General> _parser = new pb::MessageParser<GeneralConf_General>(() => new GeneralConf_General());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeneralConf_General> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExcelConvert.Auto.GeneralConf.GeneralConfGeneralReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralConf_General() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralConf_General(GeneralConf_General other) : this() {
      records_ = other.records_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralConf_General Clone() {
      return new GeneralConf_General(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ExcelConvert.Auto.GeneralConf.GeneralConf_General_Record> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::ExcelConvert.Auto.GeneralConf.GeneralConf_General_Record.Parser);
    private readonly pbc::RepeatedField<global::ExcelConvert.Auto.GeneralConf.GeneralConf_General_Record> records_ = new pbc::RepeatedField<global::ExcelConvert.Auto.GeneralConf.GeneralConf_General_Record>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ExcelConvert.Auto.GeneralConf.GeneralConf_General_Record> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeneralConf_General);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeneralConf_General other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeneralConf_General other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
