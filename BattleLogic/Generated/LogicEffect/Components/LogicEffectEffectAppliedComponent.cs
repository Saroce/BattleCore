//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class LogicEffectEntity {

    static readonly Battle.Logic.Effect.Component.EffectAppliedComponent effectAppliedComponent = new Battle.Logic.Effect.Component.EffectAppliedComponent();

    public bool isEffectApplied {
        get { return HasComponent(LogicEffectComponentsLookup.EffectApplied); }
        set {
            if (value != isEffectApplied) {
                var index = LogicEffectComponentsLookup.EffectApplied;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : effectAppliedComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class LogicEffectMatcher {

    static Entitas.IMatcher<LogicEffectEntity> _matcherEffectApplied;

    public static Entitas.IMatcher<LogicEffectEntity> EffectApplied {
        get {
            if (_matcherEffectApplied == null) {
                var matcher = (Entitas.Matcher<LogicEffectEntity>)Entitas.Matcher<LogicEffectEntity>.AllOf(LogicEffectComponentsLookup.EffectApplied);
                matcher.componentNames = LogicEffectComponentsLookup.componentNames;
                _matcherEffectApplied = matcher;
            }

            return _matcherEffectApplied;
        }
    }
}
